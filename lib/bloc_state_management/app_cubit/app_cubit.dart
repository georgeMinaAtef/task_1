import 'package:convex_bottom_bar/convex_bottom_bar.dart';
import 'package:e_comerce/models/country_model.dart';
import 'package:e_comerce/models/service_model.dart';
import 'package:e_comerce/models/service_popular_model.dart';
import 'package:e_comerce/modules/countries/countries.dart';
import 'package:e_comerce/modules/home_page/service_page.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../models/login_model_2.dart';
import '../../modules/settings_page/settings.dart';
import '../../repo/dio_helper.dart';
import '../../shared/constants.dart';
import 'app_states.dart';

class AppCubit extends Cubit<AppStates> {
  AppCubit() : super(AppInitialState());
  static AppCubit get(context) => BlocProvider.of(context);

  int currentIndex = 0;

  List<TabItem> bottomNavBarItems = const [
    TabItem(
      icon: Icon(Icons.person),
      title: 'Who Am I',
    ),
    TabItem(
      icon: Icon(Icons.apps),
      title: 'Countries',
    ),
    TabItem(
      icon: Icon(Icons.shopping_cart),
      title: 'Service',
    ),

  ];

  List screens =  [
    SettingsPage(),
    const CountriesView(),
    const ServicePage(),

  ];

  void changeNavBar(int index) {
    currentIndex = index;
    emit(AppChangeNavBarState());
  }


  List<ServiceModel>? products;
  void getHomeData() {
    emit(AppGetHomeDataLoadingState()); // Emit loading state before fetching data
    DioHelper.getData(
      url: 'api/test/service',
    ).then((value) {
      final serviceResponse = ServiceModel.fromJson(value.data);
      final servicePopular = ServicePopularModel.fromJson(value.data);
      emit(AppGetHomeDataSuccessState(homeModel: serviceResponse, popularModel: servicePopular));
    }).catchError((error) {
      print('Error: $error');
      emit(AppGetHomeDataErrorState(error.toString()));
    });
  }



  LoginModel2? userData;
  void getUserData() {
    DioHelper.getData(url: 'api/test/user/who-am-i', token: '$token').then((value) {
      userData = LoginModel2.fromJson(value.data);
      firstNameController.text = userData!.data!.firstName!;
      emailController.text = userData!.data!.email!;
      lastNameController.text = userData!.data!.lastName!;
      dateController.text = userData!.data!.birthDate!;
      aboutController.text = userData!.data!.about!;
      passwordController.text = '${userData!.data?.email}' ;
      emit(AppGetUserDataSuccessState());
    }).catchError((error) {
      print('the error is ===> ${error.toString()}');
      emit(AppGetUserDataErrorState(error.toString()));
    });
  }




  List<String> selectedSocialMedia = [];
  final List<String> socialMediaPlatforms = ['Facebook', 'Linked In', 'Twitter'];
  final List<String> socialMediaIcons= ['assets/images/facebook.jpg','assets/images/liked_in.png','assets/images/twitter.png'];


  var aboutController = TextEditingController();

  var emailController = TextEditingController();

  var passwordController = TextEditingController();

  var firstNameController = TextEditingController();

  var lastNameController = TextEditingController();

  var dateController = TextEditingController();



  // List<Autogenerated> countries = [];
  List<CountryModel> countries = [];
  int selectedViewIndex = 1; // 0 for Country, 1 for Capital
  int selectedCountryIndex = 0;

  void changeSelectedView(int newIndex) {
    selectedViewIndex = newIndex;
    emit(AppViewChangedState());
  }


  void getCountriesData(int index) {
    emit(CountriesLoading());
    DioHelper.getData(
      url: 'api/test/country',
    ).then((value) {
      final countriesResponse = CountryModel.fromJson(value.data);
      emit(CountriesLoaded(countries: countriesResponse.data ?? [], index: index));
    }).catchError((error) {
      emit(CountriesError(error.toString()));
    });
  }


  IconData passwordIcon = Icons.visibility;
  bool isPasswordHidden = true;


  void changePasswordVisibility() {
    isPasswordHidden = !isPasswordHidden;
    isPasswordHidden
        ? passwordIcon = Icons.visibility
        : passwordIcon = Icons.visibility_off;
    emit(ChangePasswordVisibility());
  }


}
